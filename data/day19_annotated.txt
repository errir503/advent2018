
r[0] is 0 (and is not being touched)
r[1] is 10551315 (and is also not being touched)

rest is [2, 1, 0, 4]

if r[3] * r[5] == r[1]:
    r[0] += r[3]

add 1 to r[5]

if r[5] <= r[1]:
    skip 11
else:
    go back to 3

want r3 * r5 == r1

r1 is 10551315
r3 is 1
so need r5 = 10551315


addi 2 16 2  # r[2] += 16
seti 1 1 3   # r[3] = 1
seti 1 7 5   # r[5] = 1

[0, 10551315, 3, 1, 0, 10551315]

mulr 3 5 4   # 3. r[4] = r[3] * r[5]

[0, 10551315, 4, 1, 10551315, 10551315]

eqrr 4 1 4   # 4. r[4] = 1 if r[1] == r[4] else 0

[0, 10551315, 5, 1, 1, 10551315]

addr 4 2 2   # 5. r[2] += r[4]

[0, 10551315, 7, 1, 1, 10551315]

#####addi 2 1 2   # 6. r[2] += 1   (skip to 8)

[0, 10551315, 7, 1, 1, 10551315]

addr 3 0 0   #     7. r[0] += r[3]

[1, 10551315, 8, 1, 1, 10551315]

addi 5 1 5   # 8. r[5] += 1

[1, 10551315, 9, 1, 1, 10551316]

gtrr 5 1 4   # 9. r[4] = 1 if r[5] > r[1] else 0

[1, 10551315, 10, 1, 1, 10551316]

addr 2 4 2   # 10. r[2] += r[4]

[1, 10551315, 10, 1, 1, 10551316]

seti 2 3 2   # 11. r[2] = 3  (go back to instruction 3)


we are here, with
[1, 10551315, 12, 1, 1, 10551316]

addi 3 1 3  # 12, increment the candidate (in register 3)
gtrr 3 1 4  # 13, if r3 > r1, r4 = 1 else r4 = 0
addr 4 2 2  # 14, add r4 to r2
seti 1 9 2  # 15, skip this if r3 > r1, otherwise go back to step 1
mulr 2 2 2  # 16, square register2 => set it to 256
addi 1 2 1
mulr 1 1 1
mulr 2 1 1
muli 1 11 1
addi 4 3 4
mulr 4 2 4
addi 4 13 4
addr 1 4 1
addr 2 0 2
seti 0 1 2
setr 2 0 4
mulr 4 2 4
addr 2 4 4
mulr 2 4 4
muli 4 14 4
mulr 4 2 4
addr 1 4 1
seti 0 4 0
seti 0 5 2
